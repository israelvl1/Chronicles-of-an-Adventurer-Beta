from PyQt6.QtWidgets import QApplication, QMainWindow, QWidget, QLabel, QPushButton, QVBoxLayout
from PyQt6.QtOpenGLWidgets import QOpenGLWidget
from PyQt6.QtCore import QTimer, Qt, pyqtSignal, QObject, QEventLoop, QByteArray
from OpenGL.GL import *
from OpenGL.GLU import *
import sys
import math
import base64
from OpenGL.GLUT import *
from random import random
from PyQt6.QtGui import QIcon, QPixmap

icone_base64 = b""""""

class Dado3D(QOpenGLWidget):
    dadoParou = pyqtSignal(int)

    def __init__(self):
        super().__init__()
        self.xRot = 0
        self.yRot = 0
        self.zRot = 0
        self.paused = False  # Novo atributo
        self.update_value_callback = None  # Callback para enviar valor visível
        self.face_central = None  # Para guardar a face mais centralizada
        self.setFocusPolicy(Qt.FocusPolicy.StrongFocus)
        self.cor_atual = self.cor_suave()

        # Timer para animação
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.update_rotation)
        self.timer.start(1)  # ~60 FPS

        # Timer para parar automaticamente após o tempo limite
        self.auto_stop_timer = None
        self.auto_stop_time = 3  # Tempo limite para a rotação automática em segundos
    
    def start_rolling(self, use_auto_stop=True):
        """Inicia a rotação do dado."""
        self.paused = False  # Despausa a rotação
        if use_auto_stop:
            self.start_auto_stop_timer()  # Inicia o timer para parar automaticamente
        self.repaint()  # Força a atualização do widget

    def start_auto_stop_timer(self):
        """Timer que pausa automaticamente após o tempo limite"""
        if self.auto_stop_timer is not None:
            self.auto_stop_timer.stop()
        self.auto_stop_timer = QTimer(self)
        self.auto_stop_timer.setSingleShot(True)
        self.auto_stop_timer.timeout.connect(self.pause_auto_stop)
        self.auto_stop_timer.start(self.auto_stop_time * 1000)  # Converter para ms

    def pause_auto_stop(self):
        """Pausa a rotação e atualiza a face visível"""
        if not self.isVisible():  # evita rodar se a tela já fechou
            return
        self.paused = True
        self.update_visible_face()


    def initializeGL(self):
        glClearColor(0.1, 0.1, 0.1, 1)  # Fundo escuro
        glEnable(GL_DEPTH_TEST)         # Ativa profundidade
        glShadeModel(GL_SMOOTH)         # Suaviza

        # Inicializa GLUT para desenho de texto
        glutInit(sys.argv)

    def keyPressEvent(self, event):
        if event.key() in (Qt.Key.Key_Return, Qt.Key.Key_Enter):
            self.paused = not self.paused
            if not self.paused:
                # Chama sem auto-stop
                self.start_rolling(use_auto_stop=False)
            else:
                self.update_visible_face()


    def resizeGL(self, w, h):
        glViewport(0, 0, w, h)
        glMatrixMode(GL_PROJECTION)
        glLoadIdentity()
        gluPerspective(45, w / h if h != 0 else 1, 1.0, 100.0)
        glMatrixMode(GL_MODELVIEW)

    def paintGL(self):
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
        glLoadIdentity()

        glTranslatef(0.0, 0.0, -7.0)
        glRotatef(self.xRot, 1.0, 0.0, 0.0)
        glRotatef(self.yRot, 0.0, 1.0, 0.0)
        glRotatef(self.zRot, 0.0, 0.0, 1.0)

        self.draw_icosahedron()
        self.update_visible_face()

    def update_visible_face(self):
        from numpy import dot
        from numpy.linalg import norm
        from numpy import array
        from math import radians, cos, sin

        # Direção da câmera (em OpenGL, olhando para -Z)
        camera_direction = array([0, 0, -1])

        # Icosaedro
        phi = (1 + math.sqrt(5)) / 2
        vertices = [
            [-1, phi, 0], [1, phi, 0], [-1, -phi, 0], [1, -phi, 0],
            [0, -1, phi], [0, 1, phi], [0, -1, -phi], [0, 1, -phi],
            [phi, 0, -1], [phi, 0, 1], [-phi, 0, -1], [-phi, 0, 1]
        ]
        faces = [
            [0, 11, 5], [0, 5, 1], [0, 1, 7], [0, 7, 10], [0, 10, 11],
            [1, 5, 9], [5, 11, 4], [11, 10, 2], [10, 7, 6], [7, 1, 8],
            [3, 9, 4], [3, 4, 2], [3, 2, 6], [3, 6, 8], [3, 8, 9],
            [4, 9, 5], [2, 4, 11], [6, 2, 10], [8, 6, 7], [9, 8, 1]
        ]

        # Normais das faces
        normals = []
        for face in faces:
            v0, v1, v2 = [array(vertices[i]) for i in face]
            normal = array([
                (v1[1] - v0[1]) * (v2[2] - v0[2]) - (v1[2] - v0[2]) * (v2[1] - v0[1]),
                (v1[2] - v0[2]) * (v2[0] - v0[0]) - (v1[0] - v0[0]) * (v2[2] - v0[2]),
                (v1[0] - v0[0]) * (v2[1] - v0[1]) - (v1[1] - v0[1]) * (v2[0] - v0[0])
            ])
            normal = normal / norm(normal)
            normals.append(normal)

        # Aplica rotação
        def rotate_vector(v, x_angle, y_angle, z_angle):
            rx, ry, rz = radians(x_angle), radians(y_angle), radians(z_angle)

            # X
            cx, sx = cos(rx), sin(rx)
            v = array([v[0], v[1]*cx - v[2]*sx, v[1]*sx + v[2]*cx])

            # Y
            cy, sy = cos(ry), sin(ry)
            v = array([v[0]*cy + v[2]*sy, v[1], -v[0]*sy + v[2]*cy])

            # Z
            cz, sz = cos(rz), sin(rz)
            v = array([v[0]*cz - v[1]*sz, v[0]*sz + v[1]*cz, v[2]])

            return v

        max_dot = -1
        visible_index = None

        for i, normal in enumerate(normals):
            rotated = rotate_vector(normal, self.xRot, self.yRot, self.zRot)
            d = dot(rotated, camera_direction)
            if d > max_dot:
                max_dot = d
                visible_index = i

        # Define como visível se estiver de frente o suficiente
        result = None
        if max_dot > 0.7:
            result = visible_index + 1  # De 1 a 20

        self.face_central = result  # Salva a face mais central
        if self.update_value_callback:
            self.update_value_callback(result)
        if self.paused and result and self.isVisible():
            dano = ResultadoWidget.calcula_dano(result, dano_min=1, dano_max=15)
            self.dadoParou.emit(dano)

    def cor_suave(self):
        import random
        r = random.uniform(0.4, 0.9)
        g = random.uniform(0.4, 0.9)
        b = random.uniform(0.4, 0.9)
        return (r, g, b)


    def draw_icosahedron(self):
        phi = (1 + math.sqrt(5)) / 2
    
        vertices = [
            [-1, phi, 0], [1, phi, 0], [-1, -phi, 0], [1, -phi, 0],
            [0, -1, phi], [0, 1, phi], [0, -1, -phi], [0, 1, -phi],
            [phi, 0, -1], [phi, 0, 1], [-phi, 0, -1], [-phi, 0, 1]
        ]
    
        faces = [
            [0, 11, 5], [0, 5, 1], [0, 1, 7], [0, 7, 10], [0, 10, 11],
            [1, 5, 9], [5, 11, 4], [11, 10, 2], [10, 7, 6], [7, 1, 8],
            [3, 9, 4], [3, 4, 2], [3, 2, 6], [3, 6, 8], [3, 8, 9],
            [4, 9, 5], [2, 4, 11], [6, 2, 10], [8, 6, 7], [9, 8, 1]
        ]
    
        # Desenha as faces
        if not self.cor_atual or len(self.cor_atual) != 3:
            self.cor_atual = (1.0, 1.0, 1.0)  # fallback

        # Desenha as faces com a mesma cor
        glColor3f(*self.cor_atual)
        glBegin(GL_TRIANGLES)
        for face in faces:
            for vertex in face:
                glVertex3fv(vertices[vertex])
        glEnd()

    
        # Desenha as bordas (linhas pretas)
        glColor3f(0.0, 0.0, 0.0)
        glLineWidth(2.0)
        for face in faces:
            glBegin(GL_LINE_LOOP)
            for vertex in face:
                glVertex3fv(vertices[vertex])
            glEnd()
    
        # Números nas faces
        self.draw_numbers(vertices, faces)
    
    def draw_number_centered(self, number):
        if number is None:
            return

        glMatrixMode(GL_PROJECTION)
        glPushMatrix()
        glLoadIdentity()
        gluOrtho2D(0, self.width(), 0, self.height())  # Projeção ortográfica 2D
        glMatrixMode(GL_MODELVIEW)
        glPushMatrix()
        glLoadIdentity()

        glDisable(GL_DEPTH_TEST)  # Garante que fique na frente
        glColor3f(1.0, 1.0, 1.0)  # Branco

        # Posição central (ajustada por tamanho do texto)
        glTranslatef(self.width() // 2 - 10 * len(str(number)), self.height() // 2, 0)
        glScalef(0.2, 0.2, 0.2)

        for ch in str(number):
            glutStrokeCharacter(GLUT_STROKE_ROMAN, ord(ch))

        glEnable(GL_DEPTH_TEST)  # Restaura profundidade

        glPopMatrix()
        glMatrixMode(GL_PROJECTION)
        glPopMatrix()
        glMatrixMode(GL_MODELVIEW)


    def draw_numbers(self, vertices, faces):
        font = GLUT_BITMAP_HELVETICA_18
        numbers = list(range(1, 21))

        for i, face in enumerate(faces):
            # Vértices da face
            v0 = vertices[face[0]]
            v1 = vertices[face[1]]
            v2 = vertices[face[2]]

            # Centro da face
            center = [
                (v0[0] + v1[0] + v2[0]) / 3.0,
                (v0[1] + v1[1] + v2[1]) / 3.0,
                (v0[2] + v1[2] + v2[2]) / 3.0
            ]

            # Normal da face (para orientação)
            ux = v1[0] - v0[0]
            uy = v1[1] - v0[1]
            uz = v1[2] - v0[2]
            vx = v2[0] - v0[0]
            vy = v2[1] - v0[1]
            vz = v2[2] - v0[2]
            nx = uy * vz - uz * vy
            ny = uz * vx - ux * vz
            nz = ux * vy - uy * vx

            # Normaliza
            length = math.sqrt(nx**2 + ny**2 + nz**2)
            nx /= length
            ny /= length
            nz /= length

            # Desenha o número na face
            glPushMatrix()

            # Move para o centro da face
            glTranslatef(center[0], center[1], center[2])

            # Gira o número para ficar alinhado com a face (opcional e estimado)
            # Isso pode ser melhorado com matrizes, mas aqui é uma aproximação
            angle = math.degrees(math.acos(nz))  # Ângulo entre normal e eixo Z
            axis = (-ny, nx, 0)  # Eixo de rotação aproximado

            if abs(angle) > 0.01:
                glRotatef(angle, *axis)
    
            # Escala e move um pouco para que o número não fique "afundado"
            glTranslatef(-0.05 * len(str(numbers[i])), -0.05, 0.01)
            glScalef(0.0015, 0.0015, 0.0015)  # Escala para tamanho adequado

            glColor3f(0, 0, 0)
            for ch in str(numbers[i]):
                glutStrokeCharacter(GLUT_STROKE_ROMAN, ord(ch))  # Stroke = vetor, pode ser rotacionado

            glPopMatrix()

    

    def update_rotation(self):
        if not self.paused:
            self.xRot += 1.2
            self.yRot += 1.8
            self.zRot += 1.0
            self.update()
    
    def closeEvent(self, event):
        # Cancela o auto_stop_timer ao fechar a tela
        if self.auto_stop_timer is not None:
            self.auto_stop_timer.stop()
            self.auto_stop_timer = None
        event.accept()


class ResultadoWidget(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Resultado do Dado")
        self.setFixedSize(200, 100)
        pixmap = QPixmap()
        pixmap.loadFromData(QByteArray.fromBase64(icone_base64))
        self.setWindowIcon(QIcon(pixmap))


        self.label = QLabel(self)
        self.label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.label.setStyleSheet("font-size: 32px;")
        self.label.setGeometry(0, 0, 200, 100)

    def set_valor(self, valor):
        self.label.setText(str(valor))

    @staticmethod
    def calcula_dano(face, dano_min=1, dano_max=15):
        if face is None:
            return None
        dano = dano_min + ((face - 1) / (20 - 1)) * (dano_max - dano_min)
        return round(dano)  # Arredonda para inteiro


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Dado 3D Girando")
        self.setGeometry(100, 100, 800, 600)
        self.dano_min = 1
        self.dano_max = 15

        pixmap = QPixmap()
        pixmap.loadFromData(QByteArray.fromBase64(icone_base64))
        self.setWindowIcon(QIcon(pixmap))


        self.glWidget = Dado3D()
        self.setCentralWidget(self.glWidget)

        self.resultadoWidget = ResultadoWidget()
        self.resultadoWidget.hide()

        self.resultadoTimer = QTimer()
        self.resultadoTimer.setSingleShot(True)
        self.resultadoTimer.timeout.connect(self.finalizar_resultado)

        self.glWidget.update_value_callback = self.update_resultado
        self.glWidget.dadoParou.connect(self.on_dado_parou)
        

        self.dano_resultado = None
        self.loop = None

        
    def showEvent(self, event):
        super().showEvent(event)
        self.glWidget.start_rolling()  # Começa a rotação quando a janela for exibida

    def closeEvent(self, event):
        print("Fechamento manual bloqueado.")
        event.ignore()  # Impede que o usuário feche a janela

    def rolar_dado(self, dano_min=1, dano_max=15):
        self.dano_resultado = None
        self.dano_min = dano_min
        self.dano_max = dano_max

        self.show()

        self.glWidget.paused = False
        self.glWidget.cor_atual = self.glWidget.cor_suave()  # <--- AQUI A MUDANÇA DE COR

        self.loop = QEventLoop()
        self.loop.exec()

        self.hide()
        return self.dano_resultado

    def on_dado_parou(self, face_value):
        dano = ResultadoWidget.calcula_dano(face_value, self.dano_min, self.dano_max)
        self.dano_resultado = dano

        # Exibe o resultado visualmente AQUI
        self.resultadoWidget.set_valor(f"Dano: {int(dano)}")
        self.resultadoWidget.move(
            self.x() + self.width() // 2 - self.resultadoWidget.width() // 2,
            self.y() + self.height() // 2 - self.resultadoWidget.height() // 2
        )
        self.resultadoWidget.show()

        # Força o Qt a atualizar e exibir imediatamente
        QApplication.processEvents()
        try:
            self.resultadoTimer.timeout.disconnect()
        except TypeError:
            pass

        self.resultadoTimer.timeout.connect(self.finalizar_resultado)
        self.resultadoTimer.start(1000)

    def finalizar_resultado(self):
        self.close()  # Isso funciona mesmo com closeEvent ignorando o "X"
        self.resultadoWidget.close()
        if self.loop:
            self.loop.quit()

    def update_resultado(self, face_value):
        """Agora só serve para pausar visualmente o dado."""
        pass  # Não recalcula nada aqui