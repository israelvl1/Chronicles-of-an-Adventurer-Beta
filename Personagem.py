import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(__file__)))
import random
from ResultadoDado import MainWindow
from utils import garantir_qt_app


class GerenciadorDado:
    def __init__(self):
        # Cria a aplica√ß√£o Qt se ainda n√£o existir, evitando m√∫ltiplas inst√¢ncias
        self.app = garantir_qt_app()
        # Cria uma √∫nica janela do dado para reutilizar durante todo o programa
        self.janela = MainWindow()

    def rolar(self, dano_min=1, dano_max=15):
        # M√©todo para iniciar a rolagem do dado, recebendo dano m√≠nimo e m√°ximo para calcular o resultado
        return self.janela.rolar_dado(dano_min=dano_min, dano_max=dano_max)


class Personagem:
    def __init__(self, nome, vida, sexo, gerenciador_dado=None):
        self.nome = nome
        self.vida = vida
        self.sexo = sexo
        self.pocoes = []  # Lista para armazenar as po√ß√µes do personagem
        self.max_pocoes = 8  # Limite m√°ximo de po√ß√µes que o personagem pode carregar
        self.dano_max = 15  # Dano m√°ximo padr√£o para ataques
        self.revive = True  # Indica se o personagem tem uma "Po√ß√£o da F√™nix" dispon√≠vel
        self.max_vida = vida  # Vida m√°xima do personagem para refer√™ncia
        self.gerenciador_dado = (
            gerenciador_dado  # Refer√™ncia ao gerenciador do dado para realizar rolagens
        )

    def esta_vivo(self):
        # Garante que a vida nunca fique negativa e retorna se o personagem est√° vivo (> 0)
        self.vida = max(0, self.vida)
        return self.vida > 0

    def atacar(self, inimigo):
        # Verifica se o personagem atacante est√° vivo
        if not self.esta_vivo():
            print(f"{self.nome} n√£o pode atacar porque foi derrotado.")
            return

        # Verifica se o inimigo est√° vivo para atacar
        if not inimigo.esta_vivo():
            print(f"{inimigo.nome} j√° est√° derrotado.")
            return

        # Mensagem informando que o personagem vai rolar o dado para atacar
        print(
            f"{self.nome} vai rolar o dado para atacar {inimigo.nome} (dano m√°ximo {self.dano_max})..."
        )
        print("Pressione 'Enter' para parar o dado...")

        # Realiza a rolagem do dado usando o gerenciador de dado, passando o dano m√°ximo atual
        dano = self.gerenciador_dado.rolar(dano_min=1, dano_max=self.dano_max)

        # Caso a rolagem retorne None, o ataque √© cancelado ou ocorreu erro
        if dano is None:
            print("Ataque cancelado ou erro.")
            return

        # Gera um n√∫mero aleat√≥rio para chance de acerto (60%)
        chance = random.randint(1, 100)
        if chance <= 60:
            # Acertou o ataque, subtrai o dano da vida do inimigo e garante que n√£o fique negativa
            inimigo.vida -= dano
            inimigo.vida = max(0, inimigo.vida)
            print(f"{self.nome} atacou {inimigo.nome} e causou {dano} de dano!")
        else:
            # Errou o ataque
            print(f"{self.nome} errou o ataque contra {inimigo.nome}!")

        # Verifica se o inimigo foi derrotado ap√≥s o ataque
        if not inimigo.esta_vivo():
            print(f"{inimigo.nome} foi derrotado!")
        else:
            print(f"{inimigo.nome} agora tem {inimigo.vida} de vida.\n")

    def tomar_pocao(self):
        # Verifica se o personagem possui po√ß√µes para usar
        if not self.pocoes:
            print(f"{self.nome} n√£o tem mais po√ß√µes!")
            return

        # Remove a primeira po√ß√£o da lista para usar
        tipo = self.pocoes.pop(0)

        # Define a quantidade de cura baseada no tipo da po√ß√£o
        if tipo == "lendaria":
            cura = 100
        elif tipo == "poderosa":
            cura = 50
        elif tipo == "comum":
            cura = 20
        elif tipo == "misteriosa":
            cura = self.max_vida // 2
        else:
            cura = 0

        # Aplica a cura na vida atual do personagem
        self.vida += cura
        print(f"{self.nome} tomou uma po√ß√£o {tipo} e recuperou {cura} de vida!")
        print(f"Agora tem {self.vida} de vida.")
        print(f"Po√ß√µes restantes: {len(self.pocoes)}\n")

    def tentar_ganhar_pocao(self):
        # Gera chance para o personagem encontrar po√ß√µes enquanto explora
        chance = random.randint(1, 100)

        print(f"\nüîç {self.nome} est√° explorando em busca de po√ß√µes...")

        if chance <= 40:
            # 40% das vezes n√£o encontra po√ß√µes
            print(f"{self.nome} n√£o encontrou nenhuma po√ß√£o.")
            return

        # Verifica se o personagem j√° est√° com o m√°ximo de po√ß√µes
        if len(self.pocoes) >= self.max_pocoes:
            print(
                f"{self.nome} encontrou uma po√ß√£o, mas j√° est√° com o m√°ximo de {self.max_pocoes}."
            )
            return

        # Define o tipo de po√ß√£o encontrada com base em probabilidade
        tipo_pocao = random.randint(1, 100)

        if tipo_pocao <= 10:
            self.pocoes.append("lendaria")
            print(f"{self.nome} encontrou uma üíé po√ß√£o lend√°ria!")
        elif tipo_pocao <= 30:
            self.pocoes.append("poderosa")
            print(f"{self.nome} encontrou uma üî• po√ß√£o poderosa!")
        elif tipo_pocao <= 80:
            self.pocoes.append("comum")
            print(f"{self.nome} encontrou uma üß™ po√ß√£o comum.")
        else:
            self.pocoes.append("misteriosa")
            print(f"{self.nome} encontrou uma üåô po√ß√£o misteriosa!")

        # 5% de chance de encontrar uma Po√ß√£o da F√™nix, que protege da morte
        if not self.revive and random.randint(1, 100) <= 5:
            self.revive = True
            print(
                f"{self.nome} encontrou uma üïäÔ∏è Po√ß√£o da F√™nix! Agora est√° protegido da morte novamente."
            )

    def encontrar_espada(self):
        # Chance de encontrar espadas com efeitos variados
        chance = random.randint(1, 100)

        print(f"\nüîç {self.nome} est√° explorando em busca de espadas...")
        if chance <= 1:
            # Espada lend√°ria e aben√ßoada - aumenta muito dano e vida
            print(f"‚¨ú Voc√™ encontrou: Espada Branca(Lend√°ria/Aben√ßoada)!")
            print("Ela irradia poder... mas h√° algo especial nela.")
            self.dano_max += 50
            dano_vida = random.randint(10, 40)
            self.vida += dano_vida
            self.vida = max(0, self.vida)
            print("üó°Ô∏è Dano aumentado em +50!")
            print(f"üåÄ A ben√ß√£o deu {dano_vida} de vida!")
            print(f"‚ù§Ô∏è Vida atual: {self.vida}")

        if chance <= 10:
            # Espada lend√°ria maldita - aumenta dano, mas causa dano na vida tamb√©m
            print(f"üü® Voc√™ encontrou: Espada Negra (Lend√°ria/Maldita)!")
            print("‚ö†Ô∏è Ela irradia poder... mas h√° algo sinistro nela.")
            self.dano_max += 40
            dano_maldicao = random.randint(10, 40)
            self.vida -= dano_maldicao
            self.vida = max(0, self.vida)
            print("üó°Ô∏è Dano aumentado em +40!")
            print(f"üíÄ A maldi√ß√£o causou {dano_maldicao} de dano!")
            print(f"‚ù§Ô∏è Vida atual: {self.vida}")

        elif chance <= 20:
            # Espada √©pica
            print(f"üü™ Voc√™ encontrou: Espada Escura (√âpica)!")
            self.dano_max += 30
            print("üó°Ô∏è Dano aumentado em +30!")

        elif chance <= 30:
            # Espada rara
            print(f"üü¶ Voc√™ encontrou: Espada Brilhante (Rara)!")
            self.dano_max += 20
            print("üó°Ô∏è Dano aumentado em +20!")

        elif chance <= 50:
            # Espada comum
            print(f"üü´ Voc√™ encontrou: Espada Nova (Comum)!")
            self.dano_max += 10
            print("üó°Ô∏è Dano aumentado em +10!")

        else:
            # Nenhuma espada encontrada
            print("üôÅ Nenhuma espada foi encontrada dessa vez.")

    def ver_inventario(self):
        # Exibe o invent√°rio de po√ß√µes e status da Po√ß√£o da F√™nix
        print(f"\nüéí Invent√°rio de {self.nome}:")

        if self.pocoes:
            print(f"üß™ Po√ß√µes dispon√≠veis ({len(self.pocoes)}):")
            for i, tipo in enumerate(self.pocoes, start=1):
                print(f"  {i}. Po√ß√£o {tipo}")
        else:
            print("üß™ Nenhuma po√ß√£o no momento.")

        if self.revive:
            print("üïäÔ∏è Po√ß√£o da F√™nix: DISPON√çVEL (revive o her√≥i automaticamente)")
        else:
            print("üïäÔ∏è Po√ß√£o da F√™nix: j√° usada ou n√£o encontrada")

        print("")  # Linha em branco para separar visualmente
